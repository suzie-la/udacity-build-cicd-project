name: Backend Continuous Deployment
    
on:
  # Automatic trigger on pull request events targeting the main branch
  # only when code in backend folder changes
  push:
    branches:
      - main
    paths:
      - 'starter/backend/**'
  # Manual trigger using the workflow_dispatch event
  workflow_dispatch:

env:
  # Set Node.js Version
  PYTHON_VERSION: '3.10'
  AWS_REGION: 'us-east-1'

defaults:
  run:
    working-directory: ./starter/backend

jobs:

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{env.PYTHON_VERSION}}

      - name: Install pipenv
        run: pip install pipenv

      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: ~/.local/share/virtualenvs
          key: deps-python-${{ hashFiles('**/Pipfile.lock') }}

      - name: Install dependencies
        run: pipenv install --dev

      - name: Run lint
        run: pipenv run lint

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{env.PYTHON_VERSION}}

      - name: Install pipenv
        run: pip install pipenv

      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: ~/.local/share/virtualenvs
          key: deps-python-${{ hashFiles('**/Pipfile.lock') }}

      - name: Install dependencies
        run: pipenv install --dev

      - name: Run test
        run: pipenv run test

  build:
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{env.AWS_REGION}}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          BACKEND_URL: ${{ secrets.REACT_APP_MOVIE_API_URL }}
          ECR_REPOSITORY: backend

        run: | 
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:${GITHUB_SHA::7} .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${GITHUB_SHA::7}

      - name: Install kustomize
        uses: imranismail/setup-kustomize@v2

      - name: Deploy to EKS
        env:
          EKS_CLUSTER_NAME: 'cluster'
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: backend
        working-directory: ./starter/backend/k8s
        run: |
          aws eks --region $AWS_REGION update-kubeconfig --name $EKS_CLUSTER_NAME
          kustomize edit set image backend=$ECR_REGISTRY/$ECR_REPOSITORY:${GITHUB_SHA::7}
          kustomize build | kubectl apply -f -

